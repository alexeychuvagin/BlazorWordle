@using BlazorWordle.Interfaces
@implements IDisposable

<div class="keyboard">
    @for (int i = 0; i < _rows.Count; i++)
    {
        <div @key="i" class="keyboard-row">

            @if (i == 1)
            {
                <div class="half" />
            }

            @if (i == _rows.Count - 1)
            {
                <button class="one-and-a-half" onclick="@(() => State?.Submit())">Enter</button>
            }

            @foreach (var letter in _rows[i])
            {
                if (State.LettersInUse.ContainsKey(letter))
                {
                    var letterState = State.LettersInUse[letter].ToString().ToLower();
                    <button data-state="@letterState" onclick="@(() => State?.PressKey(letter))">@letter</button>
                }
                else
                {
                    <button onclick="@(() => State?.PressKey(letter))">@letter</button>
                }
            }

            @if (i == 1)
            {
                <div class="half" />
            }

            @if (i == _rows.Count - 1)
            {
                <button class="one-and-a-half" onclick="@(() => State?.Backspace())">⬅️</button>
            }

        </div>
    }
</div>


@code {
    private IList<char[]> _rows = new List<char[]> {
        new char[] { 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p' },
        new char[] { 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l' },
        new char[] { 'z', 'x', 'c', 'v', 'b', 'n', 'm' }
    };

    [Parameter]
    [EditorRequired]
    public IKeyboardState State { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        State.OnStateChanged += StateHasChanged;
        return base.OnInitializedAsync();
    }

    public void Dispose()
        => State.OnStateChanged -= StateHasChanged;
}
